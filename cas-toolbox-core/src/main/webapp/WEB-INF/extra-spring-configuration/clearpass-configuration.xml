<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to Apereo under one or more contributor license
    agreements. See the NOTICE file distributed with this work
    for additional information regarding copyright ownership.
    Apereo licenses this file to you under the Apache License,
    Version 2.0 (the "License"); you may not use this file
    except in compliance with the License.  You may obtain a
    copy of the License at the following location:

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

-->
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:sec="http://www.springframework.org/schema/security"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">
    
  <!-- IF USE clearpass : start-->
    <!-- clearpass with Memcached Map -->
    <bean id="CPserialTranscoder" class="net.spy.memcached.transcoders.SerializingTranscoder"
          p:compressionThreshold="2048" />
     
    <bean id="memcachedMap" class="net.spy.memcached.CacheMap">
        <constructor-arg index="0">
          <bean class="net.spy.memcached.spring.MemcachedClientFactoryBean"
              p:servers="${clearpass.memcache.servers}"
              p:protocol="${memcached.protocol}"
              p:locatorType="${memcached.locatorType}"
              p:failureMode="${memcached.failureMode}"
              p:transcoder-ref="CPserialTranscoder">
            <property name="hashAlg">
              <util:constant static-field="net.spy.memcached.DefaultHashAlgorithm.${memcached.hashAlgorithm}" />
            </property>
          </bean>
        </constructor-arg>
        <!-- this is the timeout for the cache in seconds -->
        <constructor-arg index="1" value="${clearpass.memcache.timeout}" />
        <!-- this is the prefix for the keys stored in the map --> 
        <constructor-arg index="2" value="${clearpass.memcache.keysPrefix}" /> 
    </bean>  

    <bean id="credentialsCache" class="org.jasig.cas.extension.clearpass.EncryptedMapDecorator">
        <constructor-arg index="0" ref="memcachedMap" />
        <!-- Replace the salt and secret key with one of your choosing -->
        <constructor-arg index="1" value="${clearpass.credentialsCache.salt}" />
        <constructor-arg index="2" value="${clearpass.credentialsCache.secretKey}" />
    </bean>

    <bean id="ticketRegistry" class="org.jasig.cas.extension.clearpass.TicketRegistryDecorator">
        <constructor-arg index="0" ref="ticketRegistryValue"/>
        <constructor-arg index="1" ref="credentialsCache"/>
    </bean>
    
    
    <!-- Security configuration -->
    <bean id="clearPassFilterChainProxy" class="org.springframework.security.web.FilterChainProxy">
        <sec:filter-chain-map request-matcher="ant">
            <sec:filter-chain pattern="/clearPass"
                              filters="casValidationFilter,httpServletRequestWrappingFilter"/>
        </sec:filter-chain-map>
    </bean>
    <!-- NOTE:
       It is dangerous to include a non-proxied CAS Filter for protecting /clearPass. Non-proxied CAS Filters
       like AuthenticationFilter don't honor the Filter chain proxy protection mechanism and, worse yet, allow access to the
       logged on user's cleartext password. It could be useful to enable this bean for easy testing of clearPass functionality however.-->
    <!--
   <bean id="casAuthenticationFilter" class="org.jasig.cas.client.authentication.AuthenticationFilter">
     <property name="casServerLoginUrl" value="${cas.securityContext.casProcessingFilterEntryPoint.loginUrl}"/>
     <property name="serverName" value="${server.name}"/>
   </bean>
   -->
    <!--
      NOTE:
      A bean named clearPassProxyList must be defined that defines
      the list of proxying services authorized to obtain clearpass credential.
    -->
    <bean id="clearPassProxyList" class="org.jasig.cas.client.validation.ProxyList">
        <constructor-arg>
            <list>
                <value>${clearpass.proxyList.value1}</value>
                <!--value>${clearpass.proxyList.value2}</value-->
            </list>
        </constructor-arg>
    </bean>

    <bean id="casValidationFilter" class="org.jasig.cas.client.validation.Cas20ProxyReceivingTicketValidationFilter"
          p:serverName="${server.name}" p:exceptionOnValidationFailure="false"
          p:useSession="true" p:ticketValidator-ref="clearPassTicketValidator"/>

    <bean id="clearPassTicketValidator" class="org.jasig.cas.client.validation.Cas20ProxyTicketValidator"
          p:allowEmptyProxyChain="false"
          p:acceptAnyProxy="false"
          c:casServerUrlPrefix="${server.prefix}" p:allowedProxyChains-ref="clearPassProxyList"/>

    <bean id="httpServletRequestWrappingFilter" class="org.jasig.cas.client.util.HttpServletRequestWrapperFilter"/>
  <!-- IF USE clearpass : stop-->
</beans>
