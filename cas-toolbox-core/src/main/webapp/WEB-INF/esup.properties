cas.authHandlers=${authHandlers}
cas.authResolvers=${authResolvers}
cas.defaultResolver=${defaultResolver}

expiration.serviceTicketUsable=${expiration.serviceTicketUsable}
expiration.serviceTicketExpiration=${expiration.serviceTicketExpiration}
expiration.grantingTicket=${expiration.grantingTicket}

# For ldapFastBindHandler or ldapFullBindHandler configuration
ldap.hosts=${ldap.hosts}
ldap.baseDn=${ldap.baseDn}
ldap.fastbind-exp=${ldap.fastbind-exp}
ldap.fullbind.filter=${ldap.fullbind.filter}

ldap.searchFilter=${ldap.searchFilter}

ldap.userPrincipalName=${ldap.userPrincipalName}

ldap.connect.timeout=${ldap.connect.timeout}

ldap.sslConfig=${ldap.sslConfig}
ldap.ssl=${ldap.ssl}
ldap.useStartTLS=${ldap.useStartTLS}
ldap.cert=${ldap.cert}
ldap.keyStore=${ldap.keyStore}
ldap.keyStoreType=${ldap.keyStoreType}
ldap.keyStorePassword=${ldap.keyStorePassword}

ldap.userDn=${ldap.userDn}
ldap.bindPasswd=${ldap.bindPasswd}

#========================================
# LDAP connection pool configuration : start
#========================================
ldap.pool.minSize=1
ldap.pool.maxSize=10
ldap.pool.validateOnCheckout=false
ldap.pool.validatePeriodically=true

# Whether to fail initialization of the components using the LDAP connection pool
# if the pool can't be established, or treat as a connection failure later
ldap.failFastInitialize=false

# Amount of time in milliseconds to block on pool exhausted condition
# before giving up.
ldap.pool.blockWaitTime=3000

# Frequency of connection validation in seconds
# Only applies if validatePeriodically=true
ldap.pool.validatePeriod=300

# Attempt to prune connections every N seconds
ldap.pool.prunePeriod=300

# Maximum amount of time an idle connection is allowed to be in
# pool before it is liable to be removed/destroyed
ldap.pool.idleTime=600

#========================================
# LDAP connection pool configuration : stop
#========================================

# For fileAuthHandler configuration
passfile.encode-algo=${passfile.encode-algo}
passfile.location=${passfile.location}

# CAS cookie domain
cookieDomain=${cookieDomain}

default.locale=${default.locale}

# IF USE ESUP stats
stats.enabled=${stats.enabled}
	
# IF USE ESUP blockAttack
block.enabled=${block.enabled}
block.activeWait=${block.activeWait}
block.lockTime=${block.lockTime}
block.cleanTimeout=${block.cleanTimeout}
block.cleanExecution=${block.cleanExecution}
block.attemptsAllowed=${block.attemptsAllowed}

# IF USE ESUP traceMe
trace.enabled=${trace.enabled}
trace.cookieSecure=${trace.cookieSecure}
trace.cookieMaxAge=${trace.cookieMaxAge}
trace.cookieName=${trace.cookieName}
trace.cookiePath=${trace.cookiePath}
trace.cookieDomain=${trace.cookieDomain}

# IF USE ESUP memcache
memcache.server=${memcache.server}
memcache.port=${memcache.port}
memcache.TGT.timeout=${memcache.TGT.timeout}
memcache.ST.timeout=${memcache.ST.timeout}
